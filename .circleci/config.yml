# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on Android, read the docs:
# https://circleci.com/docs/2.0/language-android/ for more details.
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  android: circleci/android@2.1.2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  lint:
    docker:
      - image: cimg/android:2022.12.1
    steps:
      - checkout
      - run: cp app/google-services.json.example app/google-services.json
      - android/restore-gradle-cache:
          cache-prefix: v1a
      - run: ./gradlew detekt
      - android/save-gradle-cache:
          cache-prefix: v1a
      - store_artifacts:
          path: app/build/reports/detekt/detekt.html
      - store_artifacts:
          path: data/build/reports/detekt/detekt.html
      - store_artifacts:
          path: domain/build/reports/detekt/detekt.html


  unit-tests:
    # These next lines define the Android machine image executor.
    # See: https://circleci.com/docs/2.0/executor-types/
    docker:
      - image: cimg/android:2022.12.1

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run: cp app/google-services.json.example app/google-services.json
      - android/restore-build-cache:
          cache-prefix: v1a
      - android/restore-gradle-cache:
          cache-prefix: v1a
      # The next step will run the unit tests
      - android/run-tests:
          test-command: ./gradlew testDebug
      - store_test_results:
          path: app/build/test-results/testDebugUnitTest
      - store_test_results:
          path: data/build/test-results/testDebugUnitTest
      - store_test_results:
          path: domain/build/test-results/testDebugUnitTest
      - android/save-build-cache:
          cache-prefix: v1a
      - android/save-gradle-cache:
          cache-prefix: v1a
  ui-tests:
    executor:
      name: android/android-machine
      tag: 2022.08.1
    steps:
      - checkout
      - android/accept-licenses
      - run: cp app/google-services.json.example app/google-services.json
      - android/restore-build-cache:
          cache-prefix: v1a
      - restore_cache:
          keys:
            - v1a
      - android/run-tests:
          test-command: ./gradlew pixelDebugAndroidTest  --console=plain
      - store_test_results:
          path: data/build/outputs/androidTest-results/managedDevice/allDevices
      - store_artifacts:
          path: data/build/reports/androidTests/managedDevice/allDevices
      - android/save-build-cache:
          cache-prefix: v1a
      - android/save-gradle-cache:
          cache-prefix: v1a
      - save_cache:
          key: v1a
          paths:
            - ".gradle"
            - "app/build"
            - "data/build"
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  check: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - lint
      - unit-tests
      - ui-tests
